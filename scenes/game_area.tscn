[gd_scene load_steps=9 format=2]

[ext_resource path="res://assets/graphics/forbidden_zone.svg" type="Texture" id=1]
[ext_resource path="res://scenes/HUD.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/Wall.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/gravity_point.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/graphics/wallpaper.png" type="Texture" id=5]
[ext_resource path="res://scenes/countdown.tscn" type="PackedScene" id=6]
[ext_resource path="res://assets/sounds/gamejam2k19_1.ogg" type="AudioStream" id=7]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

signal game_over

var screen_size = null
var clicked = false
var ball_responsible = true
var ball1 = null
var startpos
var allowed_x = 0.45
var ammo_stop_power = 3

func ball_update_mode():
	if ball1:
		if ball_responsible:
			ball1.set_mode(RigidBody2D.MODE_RIGID)
			print(\"setting ball1 to rigid\")
		else:
			ball1.set_mode(RigidBody2D.MODE_STATIC)
			print(\"setting ball1 to static\")

func new_ball1(pos = null, lvel = Vector2(0, 0), avel = 0):
	if ball1:
		Global.gravityobjects.erase(ball1)
		ball1.queue_free()

	ball1 = preload(\"res://scenes/Ball.tscn\").instance()
	ball1.connect(\"hit\", self, \"ball_hit\")
	if pos == null:
		if ball_responsible:
			ball1.position = startpos
		else:
			ball1.position = remote_pos_to_local(startpos)
	else:
		ball1.position = pos
	ball1.linear_velocity = lvel
	ball1.angular_velocity = avel
	ball_update_mode()
	if Global.peer == null and pos == null:
		ball1.position = startpos
	ball1.set_continuous_collision_detection_mode(2)
	add_child(ball1)

func max_score_reached():
	Global.won = ($HUD.score.x >= $HUD.max_score)
	get_tree().change_scene_to(preload(\"res://scenes/endscreen.tscn\"))

# Called when the node enters the scene tree for the first time.
func _ready():
	# remove ball2/3
	Global.gravityobjects.erase($Ball1)
	Global.gravityobjects.erase($Ball2)
	Global.gravityobjects.erase($Ball3)
	remove_child($Ball1)
	remove_child($Ball2)
	remove_child($Ball3)
	
	screen_size = get_viewport_rect().size
	startpos = Vector2(screen_size.x / 8, screen_size.y / 2)
	new_ball1()
	
	$RemoteGravityPoint/CollisionShape2D.set_modulate(Color(0, 80, 0, 50))
	$RemoteGravityPoint.position = Vector2(-3333333333, 33333333333333)

	# paused by default
	get_tree().set_pause(true)
	ball1.position = Vector2(-22222222222, -2222222222222)

	Global.connect(\"recv_indicate_rdy\", self, \"recv_indicate_rdy\")
	Global.connect(\"recv_indicate_start\", self, \"recv_indicate_start\")
	Global.connect(\"rgh_mv\", self, \"rgh_mv\")
	Global.connect(\"rgh_spawn\", self, \"rgh_spawn\")
	Global.connect(\"rgh_rm\", self, \"rgh_rm\")
	Global.connect(\"br_your_turn\", self, \"recv_br_your_turn\")
	Global.connect(\"br_pos\", self, \"recv_br_pos\")
	Global.connect(\"i_lost\", self, \"recv_enemy_lost\")
	Global.connect(\"use_stop_power\", self, \"recv_use_power_stop\")
	
	$Countdown.connect(\"done\", self, \"countdown_done\")
	$HUD.connect(\"max_score_reached\", self, \"max_score_reached\")
	
	# in case network connection: synchronized start procedure
	if Global.peer:
		print(\"real mode\")
		get_tree().set_network_peer(Global.peer)
		
		if Global.is_server():
			ball_responsible = true
		else:
			ball_responsible = false
		ball_update_mode()
		
		indicate_rdy()
	else:
		print(\"testing mode\")
		start_game()

func countdown_done():
	$Countdown.hide()
	if ! Input.is_mouse_button_pressed(BUTTON_LEFT):
		clicked = false
	if clicked:
		var p = get_viewport().get_mouse_position()
		if p.x <= screen_size.x * allowed_x:
			$GravityPoint.position = p
			Global.send_rgh_spawn(1, p)
	if !$background_music.playing:
		$background_music.playing = true
		$Countdown.sound = false
	get_tree().set_pause(false)

func do_countdown():
	if clicked:
		Global.send_rgh_rm(1)
		$GravityPoint.position = Vector2(-8888888, 888888888888)
		
	get_tree().set_pause(true)
	$Countdown.show()
	$Countdown.start()

func indicate_rdy():
	# situation: i am client, i indicate to server that i am rdy
	print(\"sending rdy signal...\")
	Global.send_indicate_rdy()

func recv_indicate_rdy():
	# only during pre-start
	if !get_tree().is_paused():
		return
	# if client: respond rdy
	if !Global.is_server():
		Global.send_indicate_rdy()
	# if server: respond go!
	if Global.is_server():
		print(\"acknowledging rdy signal\")
		Global.send_indicate_start()
		print(\"starting game\")
		start_game()

func recv_indicate_start():
	# situation: i am client, indicated rdy, recv ack
	print(\"recv rdy ack, starting\")
	start_game()

func start_game():
	if Global.peer:
		if Global.is_server():
			ball1.position = startpos
		else:
			ball1.position = remote_pos_to_local(startpos)
	else:
		# testing only
		ball1.position = startpos
	ball_update_mode()
	do_countdown()

func remote_pos_to_local(rpos):
	return screen_size - rpos

func remote_vel_to_local(rvel):
	return -1 * rvel

# rgh: remote gravity hole
func rgh_spawn(id, pos):
	print(\"create gravity hole at: \", pos)
	$RemoteGravityPoint.position = remote_pos_to_local(pos)

func rgh_mv(id, pos):
	$RemoteGravityPoint.position = remote_pos_to_local(pos)

func rgh_rm(id):
	print(\"rm gravity hole nr: \", id)
	$RemoteGravityPoint.position = Vector2(-444444444444, 444444444444)

func _input(event):
	if event is InputEventMouseButton:
		if event.pressed and BUTTON_RIGHT == event.button_mask:
			use_power_stop()
	
	if event is InputEventMouse:
		var old_clicked = clicked
		clicked = (BUTTON_LEFT == event.button_mask)
			
		# escaped allowed area -> treat like not clicked
		if event.position.x > screen_size.x * allowed_x:
			clicked = false
		
		# not clicked -> not clicked: don't do anything
		# not clicked -> clicked: spawn & mv
		if !old_clicked and clicked:
			Global.send_rgh_spawn(1, event.position)
			move_gravity_hole(event.position)
		# clicked -> not clicked: rm
		elif old_clicked and !clicked:
			Global.send_rgh_rm(1)
			move_gravity_hole(event.position)
		# clicked -> clicked: mv
		elif old_clicked and clicked:
			Global.send_rgh_mv(1, event.position)
			move_gravity_hole(event.position)
			
	if event is InputEventMouse:
		$area_forbidden_marker.hide()
		if event.position.x > screen_size.x * allowed_x:
			if BUTTON_LEFT == event.button_mask:
				$area_forbidden_marker.show()
		
   	# Print the size of the viewport
	#print(\"Viewport Resolution is: \", get_viewport_rect().size)
	pass # Replace with function body.

func recv_use_power_stop():
	if ball_responsible:
		new_ball1(ball1.position)

func use_power_stop():
	if ammo_stop_power > 0:
		ammo_stop_power -= 1
		if ball_responsible:
			new_ball1(ball1.position)
		else:
			# send rpc
			Global.send_use_stop_power()

func move_gravity_hole(position):
	if clicked:
		if screen_size.x * allowed_x >= position.x:
			$GravityPoint.position = position
		else:
			# hide gravity point for now
			$GravityPoint.position = Vector2(-100000000000, -100000000000)
	else:
		$GravityPoint.position = Vector2(-100000000000, -100000000000)

func _process(delta):
	if ball1:
		if not is_node_in_viewport(ball1):
			print(\"Ball1 outside of viewport! pos: \", ball1.position)
			if ball1.position.x <= screen_size.x * 0.5:
				lose()
			else:
				win()

	if !Global.peer:
		return
		
	if ball_responsible:
		# transmit position
		Global.send_br_pos(ball1.position, ball1.linear_velocity, ball1.angular_velocity)
		# check if still reponsible
		# if no -> handover
		var handover_margin = 0.045
		if screen_size.x * (0.5 + handover_margin) < ball1.position.x:
			print(\"current x: \", ball1.position.x, \"; handover margin: \", screen_size.x * (0.5 + handover_margin))
			# send handover
			Global.send_br_your_turn(ball1.position, ball1.linear_velocity, ball1.angular_velocity)
			# change resonsibility locally
			ball_responsible = false
			new_ball1(ball1.position, ball1.linear_velocity, ball1.angular_velocity)

func recv_br_pos(pos, lvel, avel):
	if !ball_responsible:
		ball1.position = remote_pos_to_local(pos)
		ball1.linear_velocity = remote_vel_to_local(lvel)
		ball1.angular_velocity = avel

func recv_br_your_turn(pos, lvel, avel):
	# other side tells us we have the ball responsibility
	ball_responsible = true
	new_ball1(remote_pos_to_local(pos), remote_vel_to_local(lvel), avel)

func is_node_in_viewport(node):
	if screen_size.x >= node.position.x and screen_size.y >= node.position.y and node.position.x >= 0 and node.position.y >= 0:
		return true
	return false

func ball_hit(body):
	if body == $GravityPoint:
		lose()
		
		
func win():
	if !Global.peer:
		new_ball1()
		$HUD.change_score(1, 0)
		do_countdown()
	
func lose():
	# respawn ball
	# award enemy a point
	new_ball1()
	$HUD.change_score(0,1)
	Global.send_i_lost()
	do_countdown()
	
func recv_enemy_lost():
	# don't do any ball handling; will be done on other (responsible) side
	do_countdown()
	$HUD.change_score(1,0)"

[node name="World" type="Node2D"]
script = SubResource( 1 )

[node name="area_forbidden_marker" type="Sprite" parent="."]
visible = false
texture = ExtResource( 1 )
offset = Vector2( 742, 300 )

[node name="area_forbidden_marker_old" type="Panel" parent="."]
visible = false
margin_left = 460.0
margin_top = 42.0
margin_right = 1024.0
margin_bottom = 558.0

[node name="HUD" parent="." instance=ExtResource( 2 )]
margin_top = 9.0

[node name="WallUp" parent="." instance=ExtResource( 3 )]
position = Vector2( 512, 21 )

[node name="WallDown" parent="." instance=ExtResource( 3 )]
position = Vector2( 512, 579 )

[node name="GravityPoint" parent="." instance=ExtResource( 4 )]
modulate = Color( 0.101961, 0, 1, 1 )
position = Vector2( 419.216, 93.5302 )
mass = 100.0
gravity_scale = 128.0

[node name="RemoteGravityPoint" parent="." instance=ExtResource( 4 )]
position = Vector2( 261.471, 339.698 )
mass = 100.0
gravity_scale = 128.0

[node name="Wallpaper" type="Sprite" parent="."]
z_index = -10
texture = ExtResource( 5 )
centered = false
__meta__ = {
"_edit_lock_": true
}

[node name="Countdown" parent="." instance=ExtResource( 6 )]

[node name="background_music" type="AudioStreamPlayer" parent="."]
pause_mode = 2
stream = ExtResource( 7 )
volume_db = -10.0
[connection signal="game_over" from="." to="." method="_on_World_game_over"]
