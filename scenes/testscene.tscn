[gd_scene load_steps=5 format=2]

[ext_resource path="res://scenes/Ball.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/Wall.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/gravity_point.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

signal game_over

var clicked = false
var gh_active = false

# Called when the node enters the scene tree for the first time.
func _ready():
	Global.gravityobjects.erase($Ball2)
	Global.gravityobjects.erase($Ball3)
	remove_child($Ball2)
	remove_child($Ball3)

	# paused by default
	get_tree().set_pause(true)
	
	# in case network connection: synchronized start procedure
	if Global.peer:
		print(\"real mode\")
		get_tree().set_network_peer(Global.peer)
		#start_game()
		start_countdown()
	else:
		print(\"testing mode\")
		start_game()
	
	Global.connect(\"recv_indicate_rdy\", self, \"recv_indicate_rdy\")
	Global.connect(\"recv_indicate_start\", self, \"recv_indicate_start\")

func start_countdown():
	# situation: i am client, i indicate to server that i am rdy
	print(\"sending rdy signal...\")
	Global.send_indicate_rdy()

func recv_indicate_rdy():
	# only during pre-start
	if !get_tree().is_paused():
		return
	# if client: respond rdy
	if !Global.is_server():
		Global.send_indicate_rdy()
	# if server: respond go!
	if Global.is_server():
		print(\"acknowledging rdy signal\")
		Global.send_indicate_start()
		print(\"starting game\")
		start_game()
	
func recv_indicate_start():
	# situation: i am client, indicated rdy, recv ack
	print(\"recv rdy ack, starting\")
	start_game()
	
func start_game():
	get_tree().set_pause(false)

# rgh: remote gravity hole
func rgh_spawn(id, pos):
	print(\"create gravity hole at: \", pos)
	
func rgh_mv(id, pos):
	print(\"mv gravity hole to: \", pos)
	
func rgh_rm(id):
	print(\"rm gravity hole nr: \", id)
	
func _input(event):
	if event is InputEventMouseButton:
		if event.pressed:
			Global.send_rgh_spawn(1, event.position)
			gh_active = true
		else:
			Global.send_rgh_rm(1)
			gh_active = false
	elif event is InputEventMouseMotion:
		if gh_active:
			Global.send_rgh_mv(1, event.position)

	if event is InputEventMouseButton:
		#$GravityHole.position = event.position
		clicked = not clicked
		move_gravity_hole(event.position)
	elif event is InputEventMouseMotion:
		move_gravity_hole(event.position)
		#print(\"Mouse Motion at: \", event.position)

   	# Print the size of the viewport
	#print(\"Viewport Resolution is: \", get_viewport_rect().size)
	pass # Replace with function body.

func move_gravity_hole(position):
	if clicked:
		$GravityPoint.position = position
	else:
		$GravityPoint.position = Vector2(100000000000, 100000000000)

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _on_Ball1_hit(body):
	print(\"hit \", body)
	if body == $GravityPoint:
		emit_signal(\"game_over\")
	

func _on_World_game_over():
	print(\"Game over!\")
"

[node name="World" type="Node2D"]
script = SubResource( 1 )

[node name="Ball1" parent="." instance=ExtResource( 1 )]
position = Vector2( 110.681, 148.334 )

[node name="Ball2" parent="." instance=ExtResource( 1 )]
position = Vector2( 535.021, 306.081 )

[node name="Ball3" parent="." instance=ExtResource( 1 )]
position = Vector2( 947.698, 69.8578 )

[node name="Wall" parent="." instance=ExtResource( 2 )]
position = Vector2( 497.714, -11.6913 )
scale = Vector2( 1, 0.1 )

[node name="Wall2" parent="." instance=ExtResource( 2 )]
position = Vector2( 481.013, 616.297 )
scale = Vector2( 1, 0.1 )

[node name="Wall3" parent="." instance=ExtResource( 2 )]
position = Vector2( -15.0316, 151.987 )
rotation = 1.5708
scale = Vector2( 1, 0.1 )

[node name="Wall4" parent="." instance=ExtResource( 2 )]
position = Vector2( 1030.5, 207.103 )
rotation = 1.5708
scale = Vector2( 1, 0.1 )

[node name="GravityPoint" parent="." instance=ExtResource( 3 )]
position = Vector2( 419.216, 93.5302 )
mass = 100.0
gravity_scale = 128.0
[connection signal="game_over" from="." to="." method="_on_World_game_over"]
[connection signal="hit" from="Ball1" to="." method="_on_Ball1_hit"]
